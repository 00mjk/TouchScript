/*
 * @author Valentin Simonov / http://va.lent.in/
 */

using System;
using TouchScript.Hit;
using TouchScript.InputSources;
using TouchScript.Layers;
using UnityEngine;

namespace TouchScript.Pointers
{
    /// <summary>
    /// <para>Representation of a pointer (touch, mouse) within TouchScript.</para>
    /// <para>An instance of this class is created when user touches the screen. A unique id is assigned to it which doesn't change throughout its life.</para>
    /// <para><b>Attention!</b> Do not store references to these objects beyond pointer's lifetime (i.e. when target finger is lifted off). These objects may be reused internally. Store unique ids instead.</para>
    /// </summary>
    public class Pointer
    {
        #region Constants

        /// <summary>
        /// Invalid pointer id.
        /// </summary>
        public const int INVALID_POINTER = -1;

        /// <summary>
        /// Indicates that this pointer is generated by script and is not mapped to any device input.
        /// </summary>
        public const uint FLAG_ARTIFICIAL = 1 << 0;

        /// <summary>
        /// Indicates a primary action, analogous to a left mouse button down.
        /// A <see cref="TouchPointer"/> or <see cref="ObjectPointer"/> has this flag set when it is in contact with the digitizer surface.
        /// A <see cref="PenPointer"/> has this flag set when it is in contact with the digitizer surface with no buttons pressed.
        /// A <see cref="MousePointer"/> has this flag set when the left mouse button is down.
        /// </summary>
        public const uint FLAG_FIRST_BUTTON = 1 << 1;

        /// <summary>
        /// Indicates a secondary action, analogous to a right mouse button down.
        /// A <see cref="TouchPointer"/> or <see cref="ObjectPointer"/> does not use this flag.
        /// A <see cref="PenPointer"/> has this flag set when it is in contact with the digitizer surface with the pen barrel button pressed.
        /// A <see cref="MousePointer"/> has this flag set when the right mouse button is down.
        /// </summary>
        public const uint FLAG_SECOND_BUTTON = 1 << 2;

        /// <summary>
        /// Analogous to a mouse wheel button down.
        /// A <see cref="TouchPointer"/> or <see cref="ObjectPointer"/> does not use this flag.
        /// A <see cref="PenPointer"/> does not use this flag.
        /// A <see cref="MousePointer"/> has this flag set when the mouse wheel button is down.
        /// </summary>
        public const uint FLAG_THIRD_BUTTON = 1 << 3;

        /// <summary>
        /// Indicates that this pointer is in contact with the surface. When this flag is not set, it indicates a hovering pointer.
        /// </summary>
        public const uint FLAG_INCONTACT = FLAG_FIRST_BUTTON | FLAG_SECOND_BUTTON | FLAG_THIRD_BUTTON;

        public enum PointerType
        {
            Touch,
            Mouse,
            Pen,
            Object
        }

        #endregion

        #region Public properties

        /// <summary>
        /// Internal unique pointer id.
        /// </summary>
        public int Id { get; private set; }

        public PointerType Type { get; protected set; }

        public uint Flags { get; internal set; }

        /// <summary>
        /// Original hit target.
        /// </summary>
        public Transform Target { get; internal set; }

        /// <summary>
        /// Current position in screen coordinates.
        /// </summary>
        public Vector2 Position
        {
            get { return position; }
        }

        /// <summary>
        /// Previous position (during last frame) in screen coordinates.
        /// </summary>
        public Vector2 PreviousPosition { get; private set; }

        /// <summary>
        /// Original hit information.
        /// </summary>
        public TouchHit Hit { get; internal set; }

        /// <summary>
        /// Original layer which registered this pointer.
        /// <seealso cref="TouchLayer"/>
        /// <seealso cref="CameraLayer"/>
        /// <seealso cref="CameraLayer2D"/>
        /// </summary>
        public TouchLayer Layer { get; internal set; }

        /// <summary>
        /// Original input source which created this pointer.
        /// <seealso cref="IInputSource"/>
        /// </summary>
        public IInputSource InputSource { get; private set; }

        /// <summary>
        /// Projection parameters for the layer which created this pointer.
        /// </summary>
        public ProjectionParams ProjectionParams
        {
            get { return Layer.GetProjectionParams(this); }
        }

        #endregion

        #region Private variables

        private int refCount = 0;
        private Vector2 position = Vector2.zero;
        private Vector2 newPosition = Vector2.zero;

        #endregion

        #region Public methods

        public virtual void CopyFrom(Pointer target)
        {
            Id = target.Id;
            Type = target.Type;
            Flags = target.Flags;
            Target = target.Target;
            Hit = target.Hit;
            Layer = target.Layer;
            InputSource = target.InputSource;
            position = target.position;
            PreviousPosition = target.PreviousPosition;
            newPosition = target.newPosition;
        }

        /// <inheritdoc />
        public override bool Equals(object other)
        {
            return Equals(other as Pointer);
        }

        /// <inheritdoc />
        public bool Equals(Pointer other)
        {
            if (other == null)
                return false;

            return Id == other.Id;
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            return Id;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="Pointer"/> class.
        /// </summary>
        public Pointer(IInputSource input)
        {
            Type = PointerType.Touch;
            InputSource = input;
            INTERNAL_Reset();
        }

        #endregion

        #region Internal methods

        internal void INTERNAL_Init(int id, Vector2 position)
        {
            Id = id;
            this.position = PreviousPosition = newPosition = position;
        }

        internal void INTERNAL_Reset()
        {
            Id = INVALID_POINTER;
            refCount = 0;
            Hit = default(TouchHit);
            Target = null;
            Layer = null;
            Flags = 0;
        }

        internal void INTERNAL_ResetPosition()
        {
            PreviousPosition = position;
            position = newPosition;
            newPosition = position;
        }

        internal void INTERNAL_SetPosition(Vector2 value)
        {
            newPosition = value;
        }

        internal void INTERNAL_Retain()
        {
            refCount++;
        }

        internal int INTERNAL_Release()
        {
            return --refCount;
        }

        #endregion
    }
}